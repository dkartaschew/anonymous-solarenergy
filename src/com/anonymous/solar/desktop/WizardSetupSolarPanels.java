/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package com.anonymous.solar.desktop;

import java.util.ArrayList;
import javax.swing.JFrame;
import javax.swing.JOptionPane;

import com.anonymous.solar.shared.SolarPanel;
import com.anonymous.solar.shared.SolarPanels;
import com.anonymous.solar.shared.SolarSetup;

/**
 * Wizard Panel that displays the panels that will make up part of the solar
 * setup
 * 
 * @author 07627505 Darran Kartaschew
 * @version 1.0
 */
public class WizardSetupSolarPanels extends javax.swing.JPanel implements WizardPanel {

	/**
	 * 
	 */
	private static final long serialVersionUID = -2408564051376172884L;

	private final String title = "Solar Panel Setup";

	protected Wizard wparent = null;

	protected ArrayList<SolarPanels> panels = new ArrayList<SolarPanels>();

	/**
	 * Creates new form WizardFinish, with reference to parent
	 */
	public WizardSetupSolarPanels(Wizard parent) {
		initComponents();
		this.wparent = parent;
		UpdateTable();
	}

	/**
	 * Creates new form WizardSetupSolarPanels
	 */
	public WizardSetupSolarPanels() {
		initComponents();
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
	// <editor-fold defaultstate="collapsed"
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanelPanelInformationGroup = new javax.swing.JPanel();
        jScrollPaneSolarPanels = new javax.swing.JScrollPane();
        jTableSolarPanels = new javax.swing.JTable();
        jButtonAdd = new javax.swing.JButton();
        jButtonEdit = new javax.swing.JButton();

        jPanelPanelInformationGroup.setBorder(javax.swing.BorderFactory.createTitledBorder("Panel Information"));

        jTableSolarPanels.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPaneSolarPanels.setViewportView(jTableSolarPanels);

        jButtonAdd.setText("Add");
        jButtonAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAddActionPerformed(evt);
            }
        });

        jButtonEdit.setText("Edit");
        jButtonEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonEditActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanelPanelInformationGroupLayout = new javax.swing.GroupLayout(jPanelPanelInformationGroup);
        jPanelPanelInformationGroup.setLayout(jPanelPanelInformationGroupLayout);
        jPanelPanelInformationGroupLayout.setHorizontalGroup(
            jPanelPanelInformationGroupLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelPanelInformationGroupLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelPanelInformationGroupLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPaneSolarPanels, javax.swing.GroupLayout.DEFAULT_SIZE, 340, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelPanelInformationGroupLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jButtonEdit)
                        .addGap(18, 18, 18)
                        .addComponent(jButtonAdd)))
                .addContainerGap())
        );
        jPanelPanelInformationGroupLayout.setVerticalGroup(
            jPanelPanelInformationGroupLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelPanelInformationGroupLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPaneSolarPanels, javax.swing.GroupLayout.DEFAULT_SIZE, 188, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addGroup(jPanelPanelInformationGroupLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonAdd)
                    .addComponent(jButtonEdit))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanelPanelInformationGroup, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanelPanelInformationGroup, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonEditActionPerformed
        // TODO add your handling code here:
        int row = jTableSolarPanels.getSelectedRow();
        
        if(row > -1){
	        AddNewPanel panelSet = new AddNewPanel(this, true, row);
	        panelSet.setVisible(true);
	        UpdateTable();
        } else {
        	JOptionPane.showMessageDialog(this,
					"Please select a row from the table to edit the value.",
					"Edit Panels", JOptionPane.OK_OPTION);
        }
        
        
    }//GEN-LAST:event_jButtonEditActionPerformed

    private void jButtonAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAddActionPerformed
        AddNewPanel panelSet = new AddNewPanel(this, true, null);
		
        panelSet.setVisible(true);

        UpdateTable();
    }//GEN-LAST:event_jButtonAddActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonAdd;
    private javax.swing.JButton jButtonEdit;
    private javax.swing.JPanel jPanelPanelInformationGroup;
    private javax.swing.JScrollPane jScrollPaneSolarPanels;
    private javax.swing.JTable jTableSolarPanels;
    // End of variables declaration//GEN-END:variables

	/**
	 * Callback method used by the parent panel to notify this panel that we
	 * have been given context to the user.
	 * 
	 * PLEASE NOTE: THIS PASSES THE REFERENCE OF THE GLOBAL'S "PANELS" INTO THE LOCAL 
	 * COPY OF PANELS. ONCE SOMETHING UPDATES THE LOCAL DATA, IT WILL UPDATE THE GLOBAL
	 * DATA
	 * 
	 * @return true is ok to move.
	 */
	@Override
	public boolean callbackStart() {
		SolarSetup global = wparent.getSetup();
		if (global != null) {
			// Get our inverter.
			panels = global.getPanels();
			UpdateTable();
		}
		return true;
	}

	/**
	 * Callback method used by the parent panel to notify this panel that we
	 * have requested a move away from this panel.
	 * 
	 * @return true is ok to move.
	 */
	@Override
	public boolean callbackDispose(boolean validateInput) {
		if (validateInput) {
			if (panels.size() == 0) {
				// Oops, missing data, need to handle this.
				JOptionPane.showMessageDialog(this,
						"You are missing solar panel details. Please enter these to continue.",
						"Solar Panel Configuration Information Missing", JOptionPane.OK_OPTION);
				return false;
			}
		}
		return true;
		
	}

	/**
	 * Return the title to be used for this wizard panel;
	 * 
	 * @return
	 */
	@Override
	public String getTitle() {
		return title;
	}

	/**
	 * Update the contents of the table, with the information from the last operation.
	 */
	private void UpdateTable() {

		int size = panels.size();
		int count = 0;
		Object[][] panelData = new Object[size][6];

		for (SolarPanels panel : panels) {
			panelData[count][0] = panel.getPanelType().getPanelName();
			panelData[count][1] = panel.getPanelType().getPanelCost();
			panelData[count][2] = panel.getPanelType().getPanelWattage();
			panelData[count][3] = panel.getPanelType().getPanelLifeYears();
			panelData[count][4] = panel.getPanelType().getPanelLossYear();
			panelData[count][5] = panel.getPanelCount();
			count++;
		}

		jTableSolarPanels.setModel(new javax.swing.table.DefaultTableModel(panelData, new String[] { "Name", "Cost",
				"Wattage", "Life", "Loss %", "Number"}));

	}
}
