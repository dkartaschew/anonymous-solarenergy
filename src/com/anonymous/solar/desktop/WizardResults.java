/*
 *
 */
package com.anonymous.solar.desktop;

import com.anonymous.solar.shared.SolarCalculatorLocal;
import com.anonymous.solar.shared.SolarResult;
import com.anonymous.solar.shared.SolarResultException;
import com.anonymous.solar.shared.SolarSetup;

/**
 * Wizard Panel to display the results that come back from the server.
 * 
 * @author 07627505 Darran Kartaschew
 * @version 1.0
 */
public class WizardResults extends javax.swing.JPanel implements WizardPanel {
    
    /**
	 * 
	 */
	private static final long serialVersionUID = 1185924630290486108L;
	private final String title = "Results";
    private Wizard parent = null;
    
    /**
     * Creates new form WizardFinish, with reference to parent
     */
    public WizardResults(Wizard parent) {
        initComponents();
        this.parent = parent;
    }
    /**
     * Creates new form WizardResults
     */
    public WizardResults() {
        initComponents();
    }


    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();

        jLabel1.setText("Results");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addContainerGap(347, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addContainerGap(274, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    // End of variables declaration//GEN-END:variables


    /**
     * Callback method used by the parent panel to notify this panel that we
     * have been given context to the user.
     * @return true is ok to move.
     */
    @Override
    public boolean callbackStart() {
        return true;
    }

    /**
     * Callback method used by the parent panel to notify this panel that we
     * have requested a move away from this panel.
     * @return true is ok to move.
     */
    @Override
    public boolean callbackDispose(boolean validateInput) {
        SolarSetup global = parent.getSetup();
        SolarResult results = null;
        if (global != null) {
        	try {
				results = new SolarResult(global);
			} catch (SolarResultException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
        	SolarCalculatorLocal calculator = new SolarCalculatorLocal();
        	results = calculator.calculateDailySavings(results, 1);
        	results = calculator.calculateYearlySavings(results, 1);
        	results = calculator.calculateYearlySavingsOverTime(results, 10);
        	
        	jLabel1.setText("Daily Savings : $" + results.getDailySavings() + 
        			"\tYearly Savings: $" + results.getYearlySavings());
        	
        }
    	return true;
    }

    /**
     * Return the title to be used for this wizard panel;
     * @return 
     */
    @Override
    public String getTitle() {
        return title;
    }
}
