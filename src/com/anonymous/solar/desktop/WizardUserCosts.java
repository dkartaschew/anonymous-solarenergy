/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package com.anonymous.solar.desktop;

import java.awt.Color;

import javax.swing.JFrame;
import javax.swing.JOptionPane;

import com.anonymous.solar.shared.CustomerData;
import com.anonymous.solar.shared.SolarPanel;
import com.anonymous.solar.shared.SolarPanelException;
import com.anonymous.solar.shared.SolarSetup;
import com.anonymous.solar.shared.SolarSetupException;
import com.anonymous.solar.shared.TariffRate;

/**
 * User Cost Pane for Desktop Application
 * 
 * @author Alex Colvin
 * @version 1.0
 */
public class WizardUserCosts extends javax.swing.JPanel implements WizardPanel {

        private final String title = "Customer Usage";

    private Wizard parent = null;
    private CustomerData data;
    
    
    /**
     * Creates new form WizardUserCosts
     */
    public WizardUserCosts() {
        initComponents();
        nameComponents();
    }
    
    /**
     * Creates new form WizardFinish, with reference to parent
     */
    public WizardUserCosts(Wizard parent) {
        initComponents();
        nameComponents();
        this.parent = parent;
        
    }
    
    /**
     * Names components for GUI testing
     */
    private void nameComponents() {
    	jSpinnerDailyAverageUsage.setName("SpinnerDailyAverageUsage");
    	jSpinnerDayTimeHourlyUsage.setName("SpinnerDayTimeHourlyUsage");
    }


    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanelUsageGroup = new javax.swing.JPanel();
        jLabelDailyAvgUsage = new javax.swing.JLabel();
        jSpinnerDailyAverageUsage = new javax.swing.JSpinner();
        jSpinnerDayTimeHourlyUsage = new javax.swing.JSpinner();
        jLabelDayTime = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jSpinnerMonthly = new javax.swing.JSpinner();

        jPanelUsageGroup.setBorder(javax.swing.BorderFactory.createTitledBorder("Average Monthly Usage"));

        jLabelDailyAvgUsage.setText("Daily Average Usage (KWh):");

        jSpinnerDailyAverageUsage.setModel(new javax.swing.SpinnerNumberModel(0.0d, 0.0d, 10000.0d, 1.0d));

        jSpinnerDayTimeHourlyUsage.setModel(new javax.swing.SpinnerNumberModel(0.0d, 0.0d, 24.0d, 1.0d));

        jLabelDayTime.setText("Day Time Hourly Usage (KWh):");

        jLabel1.setText("Monthly Usage (KWh)");

        jSpinnerMonthly.setModel(new javax.swing.SpinnerNumberModel(0.0d, 0.0d, 10000.0d, 1.0d));

        javax.swing.GroupLayout jPanelUsageGroupLayout = new javax.swing.GroupLayout(jPanelUsageGroup);
        jPanelUsageGroup.setLayout(jPanelUsageGroupLayout);
        jPanelUsageGroupLayout.setHorizontalGroup(
            jPanelUsageGroupLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelUsageGroupLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelUsageGroupLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabelDailyAvgUsage)
                    .addComponent(jLabelDayTime)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelUsageGroupLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jSpinnerDayTimeHourlyUsage, javax.swing.GroupLayout.DEFAULT_SIZE, 190, Short.MAX_VALUE)
                    .addComponent(jSpinnerDailyAverageUsage, javax.swing.GroupLayout.DEFAULT_SIZE, 190, Short.MAX_VALUE)
                    .addComponent(jSpinnerMonthly))
                .addContainerGap(164, Short.MAX_VALUE))
        );
        jPanelUsageGroupLayout.setVerticalGroup(
            jPanelUsageGroupLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelUsageGroupLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelUsageGroupLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelDailyAvgUsage)
                    .addComponent(jSpinnerDailyAverageUsage, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelUsageGroupLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jSpinnerDayTimeHourlyUsage, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelDayTime))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelUsageGroupLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jSpinnerMonthly, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanelUsageGroup, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanelUsageGroup, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(134, 134, 134))
        );
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabelDailyAvgUsage;
    private javax.swing.JLabel jLabelDayTime;
    private javax.swing.JPanel jPanelUsageGroup;
    private javax.swing.JSpinner jSpinnerDailyAverageUsage;
    private javax.swing.JSpinner jSpinnerDayTimeHourlyUsage;
    private javax.swing.JSpinner jSpinnerMonthly;
    // End of variables declaration//GEN-END:variables


    /**
     * Callback method used by the parent panel to notify this panel that we
     * have been given context to the user.
     *
     * @return true is ok to move.
     */
    @Override
    public boolean callbackStart() {
    	SolarSetup global = parent.getSetup();
    	
		if (global != null) {
			data = global.getCustomerData();
            jSpinnerMonthly.setValue(data.getMonthlyAverageUsage());
			jSpinnerDailyAverageUsage.setValue(data.getDailyAverageUsage());
			jSpinnerDayTimeHourlyUsage.setValue(data.getHourlyAverageUsage());
		}

        return true;
    }
    
    /**
     * Clear all the error effects from textboxes and jSpinners
     */
    private void returnToWhite(){
    	javax.swing.border.LineBorder clear = new javax.swing.border.LineBorder(Color.white, 0);
  
    	jSpinnerDailyAverageUsage.setBorder(clear);
    	jSpinnerDayTimeHourlyUsage.setBorder(clear);
    	jSpinnerMonthly.setBorder(clear);

    }


    /**
     * Callback method used by the parent panel to notify this panel that we
     * have requested a move away from this panel.
     *
     * @return true is ok to move.
     */
    @Override
    public boolean callbackDispose(boolean validateInput) {
    	javax.swing.border.LineBorder borderError = new javax.swing.border.LineBorder(Color.red, 1);
    	returnToWhite();
    	
		if (validateInput) {
			if ((((Double)jSpinnerDailyAverageUsage.getValue()) == 0) && 
					(((Double)jSpinnerDayTimeHourlyUsage.getValue()) == 0) &&
					(((Double)jSpinnerMonthly.getValue()) == 0)) {
				
				jSpinnerDailyAverageUsage.setBorder(borderError);
		    	jSpinnerDayTimeHourlyUsage.setBorder(borderError);
		    	jSpinnerMonthly.setBorder(borderError);
				// Oops, missing data, need to handle this.
				JOptionPane.showMessageDialog(this, "Please enter either an hourly usage, a daily usage or both.",
						"Estimated Usage Missing", JOptionPane.OK_OPTION);
				return false;
			}
		}
		SolarSetup global = parent.getSetup();
		if (global != null) {
			
			// Store the name and description fields.
            try {    
			data.setMonthlyAverageUsage((Double) jSpinnerMonthly.getValue());
			data.setDailyAverageUsage((Double) jSpinnerDailyAverageUsage.getValue());
			data.setHourlyAverageUsage((Double) jSpinnerDayTimeHourlyUsage.getValue());

            } catch (SolarPanelException e) {
            	return false;
            }			 
		}
		return true;
	}

    /**
     * Return the title to be used for this wizard panel;
     *
     * @return
     */
    @Override
    public String getTitle() {
        return title;
    }
}